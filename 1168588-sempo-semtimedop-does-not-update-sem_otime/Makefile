# Copyright (c) 2014 Red Hat, Inc. All rights reserved. This copyrighted material 
# is made available to anyone wishing to use, modify, copy, or
# redistribute it subject to the terms and conditions of the GNU General
# Public License v.2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# Author: Li Wang <liwang@redhat.com> 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Example Makefile for RHTS                                          #
# This example is geared towards a test for a specific package       #
# It does most of the work for you, but may require further coding   #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# The toplevel namespace within which the test lives.
# FIXME: You will need to change this:
TOPLEVEL_NAMESPACE=kernel

# The name of the package under test:
# FIXME: you wil need to change this:
PACKAGE_NAME=/general/vm/process

# The path of the test below the package:
# FIXME: you wil need to change this:
RELATIVE_PATH=bz1168588

# Version of the Test. Used with make tag.
export TESTVERSION=1.1

# The combined namespace of the test.
export TEST=/$(TOPLEVEL_NAMESPACE)/$(PACKAGE_NAME)/$(RELATIVE_PATH)


# A phony target is one that is not really the name of a file.
# It is just a name for some commands to be executed when you
# make an explicit request. There are two reasons to use a
# phony target: to avoid a conflict with a file of the same
# name, and to improve performance.
.PHONY: all install download clean

# executables to be built should be added here, they will be generated on the system under test.
BUILT_FILES=

# data files, .c files, scripts anything needed to either compile the test and/or run it.
FILES=$(METADATA) runtest.sh Makefile PURPOSE call_semop.cc get_sem_otime.cc

run: $(FILES) build
	./runtest.sh

build: $(BUILT_FILES)
	chmod a+x ./runtest.sh

clean:
	rm -f *~ *.rpm $(BUILT_FILES) *.log

# You may need to add other targets e.g. to build executables from source code
# Add them here:


# Include Common Makefile
include /usr/share/rhts/lib/rhts-make.include

# Generate the testinfo.desc here:
$(METADATA): Makefile
	@touch $(METADATA)
	# Change to the test owner's name
	@echo "Owner:	     Li Wang <liwang@redhat.com>" >  $(METADATA)
	@echo "Name:         $(TEST)" >> $(METADATA)
	@echo "Path:         $(TEST_DIR)"	>> $(METADATA)
	@echo "License:      RedHat internal" >> $(METADATA)
	@echo "TestVersion:  $(TESTVERSION)"	>> $(METADATA)
	@echo "Description:  autotest for bz168588">> $(METADATA)
	@echo "TestTime:     20m" >> $(METADATA)
	@echo "RunFor:       kernel" >> $(METADATA)  
	@echo "Requires:        @development \
		libgcc.i686    glibc-devel.i686    glibc-static.i686 \
		libgcc.x86_64  glibc-devel.x86_64  glibc-static.x86_64 \
		libgcc.ppc     glibc-devel.ppc     glibc-static.ppc \
		libgcc.ppc64   glibc-devel.ppc64   glibc-static.ppc64 \
		libgcc.ppc64le glibc-devel.ppc64le glibc-static.ppc64le \
		libgcc.s390    glibc-devel.s390    glibc-static.s390 \
		libgcc.s390x   glibc-devel.s390x   glibc-static.s390x \
		libgcc.aarch64 glibc-devel.aarch64 glibc-static.aarch64" >> $(METADATA)

# You may need other fields here; see the documentation
	rhts-lint $(METADATA)
